apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  annotations:
    definition.oam.dev/description: Describes long-running, scalable, containerized
      services that have a stable network endpoint to receive external network traffic
      from customers.
    meta.helm.sh/release-name: kubevela
    meta.helm.sh/release-namespace: vela-system
  creationTimestamp: "2021-07-13T08:13:36Z"
  generation: 1
  labels:
    app.kubernetes.io/managed-by: Helm
  name: webservice
  namespace: vela-system
  resourceVersion: "67048"
  uid: 8e0030be-4708-46e7-adf4-a955add5ff45
spec:
  schematic:
    cue:
      template: "output: {\n\tapiVersion: \"apps/v1\"\n\tkind:       \"Deployment\"\n\tspec:
        {\n\t\tselector: matchLabels: {\n\t\t\t\"app.oam.dev/component\": context.name\n\t\t\tif
        parameter.addRevisionLabel {\n\t\t\t\t\"app.oam.dev/appRevision\": context.appRevision\n\t\t\t}\n\t\t}\n\n\t\ttemplate:
        {\n\t\t\tmetadata: labels: {\n\t\t\t\t\"app.oam.dev/component\": context.name\n\t\t\t\tif
        parameter.addRevisionLabel {\n\t\t\t\t\t\"app.oam.dev/appRevision\": context.appRevision\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tspec:
        {\n\t\t\t\tcontainers: [{\n\t\t\t\t\tname:  context.name\n\t\t\t\t\timage:
        parameter.image\n\n\t\t\t\t\tif parameter[\"cmd\"] != _|_ {\n\t\t\t\t\t\tcommand:
        parameter.cmd\n\t\t\t\t\t}\n\n\t\t\t\t\tif parameter[\"env\"] != _|_ {\n\t\t\t\t\t\tenv:
        parameter.env\n\t\t\t\t\t}\n\n\t\t\t\t\tif context[\"config\"] != _|_ {\n\t\t\t\t\t\tenv:
        context.config\n\t\t\t\t\t}\n\n\t\t\t\t\tports: [{\n\t\t\t\t\t\tcontainerPort:
        parameter.port\n\t\t\t\t\t}]\n\n\t\t\t\t\tif parameter[\"cpu\"] != _|_ {\n\t\t\t\t\t\tresources:
        {\n\t\t\t\t\t\t\tlimits:\n\t\t\t\t\t\t\t\tcpu: parameter.cpu\n\t\t\t\t\t\t\trequests:\n\t\t\t\t\t\t\t\tcpu:
        parameter.cpu\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif parameter[\"volumes\"]
        != _|_ {\n\t\t\t\t\t\tvolumeMounts: [ for v in parameter.volumes {\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmountPath:
        v.mountPath\n\t\t\t\t\t\t\t\tname:      v.name\n\t\t\t\t\t\t\t}}]\n\t\t\t\t\t}\n\t\t\t\t}]\n\n\t\t\tif
        parameter[\"volumes\"] != _|_ {\n\t\t\t\tvolumes: [ for v in parameter.volumes
        {\n\t\t\t\t\t{\n\t\t\t\t\t\tname: v.name\n\t\t\t\t\t\tif v.type == \"pvc\"
        {\n\t\t\t\t\t\t\tpersistentVolumeClaim: {\n\t\t\t\t\t\t\t\tclaimName: v.claimName\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif
        v.type == \"configMap\" {\n\t\t\t\t\t\t\tconfigMap: {\n\t\t\t\t\t\t\t\tdefaultMode:
        v.defaultMode\n\t\t\t\t\t\t\t\tname:        v.cmName\n\t\t\t\t\t\t\t\tif v.items
        != _|_ {\n\t\t\t\t\t\t\t\t\titems: v.items\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif
        v.type == \"secret\" {\n\t\t\t\t\t\t\tsecret: {\n\t\t\t\t\t\t\t\tdefaultMode:
        v.defaultMode\n\t\t\t\t\t\t\t\tsecretName:  v.secretName\n\t\t\t\t\t\t\t\tif
        v.items != _|_ {\n\t\t\t\t\t\t\t\t\titems: v.items\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif
        v.type == \"emptyDir\" {\n\t\t\t\t\t\t\temptyDir: {\n\t\t\t\t\t\t\t\tmedium:
        v.medium\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}}]\n\t\t\t}\n\t\t}\n\t\t}\n\t}\n}\nparameter:
        {\n\t// +usage=Which image would you like to use for your service\n\t// +short=i\n\timage:
        string\n\n\t// +usage=Commands to run in the container\n\tcmd?: [...string]\n\n\t//
        +usage=Which port do you want customer traffic sent to\n\t// +short=p\n\tport:
        *80 | int\n\t// +usage=Define arguments by using environment variables\n\tenv?:
        [...{\n\t\t// +usage=Environment variable name\n\t\tname: string\n\t\t// +usage=The
        value of the environment variable\n\t\tvalue?: string\n\t\t// +usage=Specifies
        a source the value of this var should come from\n\t\tvalueFrom?: {\n\t\t\t//
        +usage=Selects a key of a secret in the pod's namespace\n\t\t\tsecretKeyRef:
        {\n\t\t\t\t// +usage=The name of the secret in the pod's namespace to select
        from\n\t\t\t\tname: string\n\t\t\t\t// +usage=The key of the secret to select
        from. Must be a valid secret key\n\t\t\t\tkey: string\n\t\t\t}\n\t\t}\n\t}]\n\t//
        +usage=Number of CPU units for the service, like `0.5` (0.5 CPU core), `1`
        (1 CPU core)\n\tcpu?: string\n\n\t// If addRevisionLabel is true, the appRevision
        label will be added to the underlying pods \n\taddRevisionLabel: *false |
        bool\n\n\t// +usage=Declare volumes and volumeMounts\n\tvolumes?: [...{\n\t\tname:
        \     string\n\t\tmountPath: string\n\t\t// +usage=Specify volume type, options:
        \"pvc\",\"configMap\",\"secret\",\"emptyDir\"\n\t\ttype: \"pvc\" | \"configMap\"
        | \"secret\" | \"emptyDir\"\n\t\tif type == \"pvc\" {\n\t\t\tclaimName: string\n\t\t}\n\t\tif
        type == \"configMap\" {\n\t\t\tdefaultMode: *420 | int\n\t\t\tcmName:      string\n\t\t\titems?:
        [...{\n\t\t\t\tkey:  string\n\t\t\t\tpath: string\n\t\t\t\tmode: *511 | int\n\t\t\t}]\n\t\t}\n\t\tif
        type == \"secret\" {\n\t\t\tdefaultMode: *420 | int\n\t\t\tsecretName:  string\n\t\t\titems?:
        [...{\n\t\t\t\tkey:  string\n\t\t\t\tpath: string\n\t\t\t\tmode: *511 | int\n\t\t\t}]\n\t\t}\n\t\tif
        type == \"emptyDir\" {\n\t\t\tmedium: *\"\" | \"Memory\"\n\t\t}\n\t}]\n}\n"
  workload:
    definition:
      apiVersion: apps/v1
      kind: Deployment
status:
  conditions:
  - lastTransitionTime: "2021-07-13T08:14:20Z"
    message: 'cannot discover the open api of the CRD : parse json schema of k8s crds
      error: constraint not allowed because type object is excluded (and 1 more errors)'
    reason: ReconcileError
    status: "False"
    type: Synced
